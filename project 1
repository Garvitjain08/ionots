
const express = require("express");
const mongoose = require("mongoose");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const app = express();


app.use(express.json());


mongoose.connect("mongodb://localhost:27017/project_assignment", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error:"));
db.once("open", () => {
  console.log("Connected to MongoDB");
});


const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

const ProjectSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String },
  status: { type: String, enum: ["assigned", "accepted", "in-progress", "completed"], default: "assigned" },
  assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
});

const User = mongoose.model("User", UserSchema);
const Project = mongoose.model("Project", ProjectSchema);


app.post("/auth/register", async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, password: hashedPassword });
  try {
    await user.save();
    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    res.status(400).json({ error: "Error registering user" });
  }
});


app.post("/auth/login", async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ error: "Invalid credentials" });
  }
  const token = jwt.sign({ userId: user._id }, "secretkey", { expiresIn: "1h" });
  res.json({ token });
});


const authenticate = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) return res.status(401).json({ error: "Unauthorized" });

  try {
    const payload = jwt.verify(token.split(" ")[1], "secretkey");
    req.user = payload;
    next();
  } catch (err) {
    res.status(401).json({ error: "Invalid token" });
  }
};


app.post("/projects/assign", authenticate, async (req, res) => {
  const { title, description, assignedTo } = req.body;
  const project = new Project({ title, description, assignedTo });
  try {
    await project.save();
    res.status(201).json({ message: "Project assigned successfully" });
  } catch (err) {
    res.status(400).json({ error: "Error assigning project" });
  }
});


app.get("/projects", authenticate, async (req, res) => {
  const projects = await Project.find({ assignedTo: req.user.userId });
  res.json(projects);
});


app.patch("/projects/accept/:id", authenticate, async (req, res) => {
  const { id } = req.params;
  try {
    const project = await Project.findById(id);
    if (!project || project.assignedTo.toString() !== req.user.userId) {
      return res.status(404).json({ error: "Project not found" });
    }
    project.status = "accepted";
    await project.save();
    res.json({ message: "Project accepted" });
  } catch (err) {
    res.status(400).json({ error: "Error accepting project" });
  }
});


app.patch("/projects/update/:id", authenticate, async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  try {
    const project = await Project.findById(id);
    if (!project || project.assignedTo.toString() !== req.user.userId) {
      return res.status(404).json({ error: "Project not found" });
    }
    project.status = status;
    await project.save();
    res.json({ message: "Project status updated" });
  } catch (err) {
    res.status(400).json({ error: "Error updating project status" });
  }
});

app.listen(3000, () => {
  console.log("Server is running on http://localhost:3000");
});
